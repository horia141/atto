#
# This module defines lists (in the sense that it says what a list
# looks like in Atto) as well as operations of them. The definition
# we have for a list is classic: A list is either null (the empty list)
# or consists of a pairing of two elements: some sort of data element
# (the "head") and another list (the "tail").
#
# The constructors we provide for building lists - which mimick the
# above definition - "cons" and "null" produce normal Atto objects.
# "cons" produces a dictionary with two keys : "Head" and "Tail", while
# "null" produces the symbol "NULL". Our filter functions are interested
# only in checking that whatever we pass have the minimum required
# structure to be lists, conses, nulls etc. We can, ofcourse, store extra
# information in a cons cell, for example, if we wanted to.
#
(module Core:Data:List
  (import Core:Control:Flow if let case)
  (import Core:Data:Boolean and or)
  (import Core:Data:Number lt inc add)
  (import Core:Data:Dict is-dict? has-key?)

  (export is-list? is-cons? is-list? make-list range cons null head tail map
	  foldl foldr)

  #
  # Test if an object is a list.
  #
  # Reason:
  #   Useful as an argument filter in function definition or whenever
  #   we wish to test if something looks like a list. Falls back to
  #   testing if the object is a cons or a null.
  # Arguments:
  #   something: an object to test for being a list.
  # Return:
  #   #T if the object is a list, #F otherwise.
  # Raises:
  #   Nothing.
  # 
  (define is-list?
    [something
      (or (is-null? (something))
	  (is-cons? (something)))])

  #
  # Test if an object is a cons - a type of list.
  #
  # Reason:
  #   When doing list processing with the Haskell-like representation
  #   this module employs, we often need to check if an object looks
  #   like a cons - that is, it has been produced by the "cons" function.
  #   The check is simple: test if the argument is a dictionary with
  #   keys "Head" and "Tail". Notice that the check is not strict, other
  #   keys might be present.
  # Arguments:
  #   something: an object to test for being a cons.
  # Return:
  #   #T if the object is a cons, #F otherwise.
  # Raises:
  #  Nothing.
  #
  (define is-cons?
    [something
      (if (is-dict? (something))
	  {if (and (has-key? (something) Head)
		   (has-key? (something) Tail))
	      {is-list? (something Tail)}
	      #F}
	  #F)])

  #
  # Test if an object is a null - a type of list.
  #
  # Reason:
  #   When doing list processing with the Haskell-like representation
  #   this module employs, we often need to check if an object looks
  #   like a null - that is, it has been produced by the "null" function.
  #   The check i simple: test if the argument is the symbol "NULL".
  # Arguments:
  #   something: an object to test for being a null.
  # Return:
  #   #T if the object is a cons, #F otherwise.
  # Raises:
  #   Nothing.
  #
  (define is-null?
    [something
      (eq? (something) NULL)])

  #
  # Build a list from a variable number of arguments.
  #
  # Reason:
  #   A quick way to produce a list, almost like a literal for lists.
  #   This function transforms the variable argument array into a list,
  #   as understood by this module.
  # Arguments:
  #   elements*: an array of elements to turn into a list.
  # Return:
  #   A list consisting of the items in "elements", in the order they
  #   appear.
  # Raises:
  #   Nothing.
  #
  (define make-list
    [elements*
      # Worker does the actual work. It recusivly builds the output list.
      # At each invocation, it check if there are any elements left in
      # "elements" (the base case), and produces null or a cons of the
      # current ("index") element and the list produced after the current
      # element, depending on the negative or affirmative answer to the test.
      (let _worker
             [index
 	       (if (lt (index) (elements Length))
		   {cons (elements (index)) (_worker (inc (index)))}
		   {null})]
        {_worker 0})])

  #
  # Build a list containing a certain range of numbers.
  #
  # Reason:
  #   This is a quick way to produce a list. The resulting list has the
  #   number "start" as its head, and the number "start+step" as its
  #   next element, etc. until we reach "stop". If "start >= stop" then
  #   the list is empty.
  # Arguments:
  #   start: the first number in the list.
  #   stop: the limit of numbers to generate. No number greater than this
  #     will be produced.
  #   step=1: a keyword argument used to specify the difference between
  #     the numbers held in two consecutive list cells.
  # Return:
  #   A list containing the numbers "[x = start + i*step && x < stop]".
  # Raises:
  #   Nothing.
  #
  (define range
    [start stop step=1!
      (if (lt (start) (stop))
	  {cons (start)
		(range (add (start) (step)) (stop) step=(step))}
	  {null})])

  #
  # Build a cons - a type of list built as a pairing between some data and
  # another list (the "Head" and "Tail" keys, respectivly).
  #
  # Reason:
  #   We represent lists in the classic ADT way as either a cons cell or
  #   a null. This is the cons constructor. The language representation
  #   is a dictionary with two keys: "Head" and "Tail".
  # Arguments:
  #   head: an object, which will be the first element of the list.
  #   tail: another list.
  # Return:
  #   A new list, similar to "tail", with "head" as the first element
  #   (followed by all the elements in "tail").
  # Raises:
  #   Nothing.
  #
  (define cons
    [head tail
      <Head (head)
       Tail (tail)>])

  #
  # Build a null - a type of list defined as the simple NULL symbol.
  # This is used to signal the empty-list and usually appears in cons
  # cells as the "Tail" key, signaling the end of the list.
  #
  # Reason:
  #   We represent lists in the classic ADT way as either a cons cell or
  #   null. This is the null constructor. It receives no arguments and
  #   produces the symbol "NULL".
  # Arguments:
  # Return:
  #   NULL.
  # Raises:
  #  Nothing.
  #
  (define null
    NULL)

  #
  # Obtain the first element from a list. Must be non-null.
  #
  # Reason:
  #   Given the definition of a list, this function, given a cons,
  #   produces the "Head" key. That is, given a list, it returns the
  #   first element from that list.
  # Arguments:
  #   list: the list from which we extract the first element.
  # Return:
  #   The first element of the list (the "Head" of the cons cell "list").
  # Raises:
  #   Error: if "list" is null instead of a cons.
  #
  (define head
    [list
      (case (list)
	(is-cons?) {list Head}
	(is-null?) {error 'Cannot apply head to NULL'})])

  #
  # Obtain a list consisting of all the elements except the first one.
  #
  # Reason:
  #   Given the definition of a list, this function, given a cons,
  #   produces the "Tail" key. That is, given a list, it returns a list
  #   consisting of all but the first element in it.
  # Arguments:
  #   list: the list from which we remove the first element.
  # Return:
  #   A list consisting of all but the first elements from "list" (the
  #   "Tail" key of the cons cell "list").
  # Raises:
  #   Error: if "list" is null instead of a cons.
  #
  (define tail
    [list
      (case (list)
	(is-cons?) {list Tail}
	(is-null?) {error 'Cannot apply tail to NULL'})])

  #
  # Apply a function to each element of a list.
  #
  # Reason:
  #   This function is used to apply a function to each element of a list.
  #   The function must naturally only accept one argument. This is a special
  #   case of the generalized "for" statement found in other languages.
  # Arguments:
  #   func: a one argument function to apply to each element of the list.
  #   list: the list to process.
  # Return:
  #   A new list, of equal length to "list" and where each corresponding element
  #   is obtained by applying "func" to the original element in "list".
  # Raises:
  #   Nothing.
  #
  (define map
    [func list
      (case (list)
	(is-cons?) {cons (func (head (list))) (map (func) (tail (list)))}
	(is-null?) {null})])

  #
  # Reduce a list to a single element by applying a function iteratively
  # on each of its elements.
  #
  # Reason:
  #   This function is used to reduce a list to a single element in a
  #   controlled manner. It first applies its "func" argument to the last
  #   two elements of the list. It then applies "func" to the last element
  #   of the remaing list and the result of the previous call. This process
  #   continues until we process the whole list, at which point we combine
  #   "initial" together with the result of "foldr" on the whole list to
  #   produce the final result, through "func". If the list is empty, we just
  #   return "initial".
  # Arguments:
  #   func: the two order argument function used to reduce "list".
  #   initial: a saftey value, usually neutral in relation to "func" (such as
  #     "0" for "add" or "1" for "mul"), returned when the list is empty or
  #     combined with the result of "foldr" on the whole list otherwise.
  #   list: the list to reduce.
  # Return:
  #   The reduced list, as defined in the Reason section.
  # Raises:
  #   Nothing.
  #
  (define foldr
    [func initial list
      (case (list)
	(is-cons?) {func (initial)
			 (foldr (func) (head (list)) (tail (list)))}
	(is-null?) {initial})])

  #
  # Reduce a list to a single element by applying a function iteratively
  # on each of its elements.
  #
  # Reason:
  #   This function is used to reduce a list to a single element in a controlled
  #   manner. It first applies its "func" argument to the "initial" argument and
  #   the first element of the list. It then used "func" on this result and the
  #   second element in the list. This continues until we have no list to consume.
  #   If the list is empty, we return "initial".
  # Arguments:
  #   func: the two order argument function used to reduce "list".
  #   initial: a saftey value, usually neutral in relation to "func" (such as "0"
  #     for "add" or "1" for "mul"), returned when the list is empty or combined
  #     with the result of "foldl" on the whole list otherwise.
  #   list: the list to reduce.
  # Return:
  #   The reduced list, as defined in the Reason section.
  # Raises:
  #   Nothing.
  #
  (define foldl
    [func initial list
      (case (list)
        (is-cons?) {foldl (func)
			  (func (initial) (head (list)))
			  (tail (list))}
	(is-null?) {initial})]))
